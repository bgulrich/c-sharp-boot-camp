// <auto-generated />
using System;
using EfCoreExample.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EfCoreExample.Migrations
{
    [DbContext(typeof(VehicleContext))]
    partial class VehicleContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("LinqTests.Model.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("LinqTests.Model.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Make");

                    b.Property<Guid>("ManufacturerId");

                    b.Property<string>("Model");

                    b.Property<int>("ModelYear");

                    b.Property<DateTime>("ReleaseDate");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("LinqTests.Model.Vehicle", b =>
                {
                    b.HasOne("LinqTests.Model.Manufacturer", "Manufacturer")
                        .WithMany("Vehicles")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("LinqTests.Model.Drivetrain", "Drivetrain", b1 =>
                        {
                            b1.Property<Guid>("VehicleId");

                            b1.Property<bool>("LockupTorqueConverter");

                            b1.Property<int>("Type");

                            b1.HasKey("VehicleId");

                            b1.ToTable("Vehicles");

                            b1.HasOne("LinqTests.Model.Vehicle")
                                .WithOne("Drivetrain")
                                .HasForeignKey("LinqTests.Model.Drivetrain", "VehicleId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("LinqTests.Model.Transmission", "Transmission", b2 =>
                                {
                                    b2.Property<Guid>("DrivetrainVehicleId");

                                    b2.Property<int>("Gears");

                                    b2.Property<int>("Type");

                                    b2.HasKey("DrivetrainVehicleId");

                                    b2.ToTable("Vehicles");

                                    b2.HasOne("LinqTests.Model.Drivetrain")
                                        .WithOne("Transmission")
                                        .HasForeignKey("LinqTests.Model.Transmission", "DrivetrainVehicleId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });

                    b.OwnsOne("LinqTests.Model.Engine", "Engine", b1 =>
                        {
                            b1.Property<Guid>("VehicleId");

                            b1.Property<int>("Aspiration");

                            b1.Property<int>("Cylinders");

                            b1.Property<float>("DisplacementLiters");

                            b1.HasKey("VehicleId");

                            b1.ToTable("Vehicles");

                            b1.HasOne("LinqTests.Model.Vehicle")
                                .WithOne("Engine")
                                .HasForeignKey("LinqTests.Model.Engine", "VehicleId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("LinqTests.Model.FuelInfo", "Fuel", b2 =>
                                {
                                    b2.Property<Guid>("EngineVehicleId");

                                    b2.Property<int?>("FuelGrade");

                                    b2.Property<int>("FuelType");

                                    b2.HasKey("EngineVehicleId");

                                    b2.ToTable("Vehicles");

                                    b2.HasOne("LinqTests.Model.Engine")
                                        .WithOne("Fuel")
                                        .HasForeignKey("LinqTests.Model.FuelInfo", "EngineVehicleId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });

                    b.OwnsOne("LinqTests.Model.FuelEconomy", "FuelEconomy", b1 =>
                        {
                            b1.Property<Guid>("VehicleId");

                            b1.Property<int>("City");

                            b1.Property<int>("Combined");

                            b1.Property<int>("Highway");

                            b1.HasKey("VehicleId");

                            b1.ToTable("Vehicles");

                            b1.HasOne("LinqTests.Model.Vehicle")
                                .WithOne("FuelEconomy")
                                .HasForeignKey("LinqTests.Model.FuelEconomy", "VehicleId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
