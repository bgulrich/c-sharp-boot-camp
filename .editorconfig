# Walmart DFW C# Editor Config File
# Version 0.4 (please increment me if you edit anything below)
# settings based on: .NET Core Language EditorConfig: https://github.com/dotnet/corefx/blob/master/.editorconfig

###############################
# Core EditorConfig Options   #
###############################

root = true

# Default settings:
# A newline ending every file
# Use 4 spaces as indentation
[*]
insert_final_newline     = true
indent_style             = space
indent_size              = 4
trim_trailing_whitespace = true

# C# unit test files (*Should.cs)
[*Should.cs]
# async methods - PascalCase (don't require async suffix on unit tests)
dotnet_naming_style.unit_test_async_method_style.capitalization  = pascal_case
dotnet_naming_rule.unit_test_async_method_rule.style             = unit_test_async_method_style
dotnet_naming_rule.unit_test_async_method_rule.severity          = error
dotnet_naming_rule.unit_test_async_method_rule.symbols           = async_methods
dotnet_naming_symbols.unit_test_async_methods.applicable_kinds   = method
dotnet_naming_symbols.unit_test_async_methods.required_modifiers = async

# C# files
[*.cs]
max_line_length = 160

###############################
# C# Formatting Rules         #
###############################

# New line preferences
csharp_new_line_before_open_brace                     = all
csharp_new_line_before_else                           = true
csharp_new_line_before_catch                          = true
csharp_new_line_before_finally                        = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types     = true
csharp_new_line_between_query_expression_clauses      = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces         = false
csharp_indent_case_contents  = true
csharp_indent_switch_labels  = true
csharp_indent_labels         = one_less_than_current

# Space preferences
csharp_space_after_cast                                                  = false
csharp_space_after_colon_in_inheritance_clause                           = true
csharp_space_after_comma                                                 = true
csharp_space_after_dot                                                   = false
csharp_space_after_keywords_in_control_flow_statements                   = true
csharp_space_after_semicolon_in_for_statement                            = true
csharp_space_around_binary_operators                                     = before_and_after
csharp_space_around_declaration_statements                               = do_not_ignore
csharp_space_before_colon_in_inheritance_clause                          = true
csharp_space_before_comma                                                = false
csharp_space_before_dot                                                  = false
csharp_space_before_open_square_brackets                                 = false
csharp_space_before_semicolon_in_for_statement                           = false
csharp_space_between_empty_square_brackets                               = false
csharp_space_between_method_call_empty_parameter_list_parentheses        = false
csharp_space_between_method_call_name_and_opening_parenthesis            = false
csharp_space_between_method_call_parameter_list_parentheses              = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis        = false
csharp_space_between_method_declaration_parameter_list_parentheses       = false
csharp_space_between_parentheses                                         = false
csharp_space_between_square_brackets                                     = false

# Wrapping preferences
csharp_preserve_single_line_statements = true
csharp_preserve_single_line_blocks     = true

# var preferences
csharp_style_var_for_built_in_types    = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere             = true:suggestion

# Expression-bodied members
csharp_style_expression_bodied_methods      = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators    = false:none
csharp_style_expression_bodied_properties   = true:suggestion
csharp_style_expression_bodied_indexers     = true:suggestion
csharp_style_expression_bodied_accessors    = true:suggestion

# Pattern-matching preferences
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

# Null-checking preferences
csharp_style_throw_expression          = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Expression-level preferences
csharp_prefer_braces                               = false:none
csharp_style_deconstructed_variable_declaration    = true:suggestion
csharp_prefer_simple_default_expression            = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_inlined_variable_declaration          = true:suggestion

# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:warning


###############################
# .NET Coding Conventions     #
###############################

# Organize usings
dotnet_sort_system_directives_first     = true

# this. preferences
dotnet_style_qualification_for_field    = false:none
dotnet_style_qualification_for_property = false:none
dotnet_style_qualification_for_method   = false:none
dotnet_style_qualification_for_event    = false:none

# use language keywords instead of BCL types
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access             = true:suggestion

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_binary_operators      = always_for_clarity:suggestion
dotnet_style_parentheses_in_other_operators             = never_if_unnecessary:suggestion

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:none
dotnet_style_readonly_field                  = true:warning

# Expression-level preferences
dotnet_style_object_initializer                                  = true:suggestion
dotnet_style_collection_initializer                              = true:suggestion
dotnet_style_explicit_tuple_names                                = true:suggestion
dotnet_style_null_propagation                                    = true:suggestion
dotnet_style_coalesce_expression                                 = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_inferred_tuple_names                         = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names         = true:suggestion
dotnet_style_prefer_auto_properties                              = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment       = true:suggestion
dotnet_style_prefer_conditional_expression_over_return           = true:suggestion

###############################
# Naming Conventions          #
###############################

# Style Definitions

# PascalCaseStyle
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
# camelCaseStyle
dotnet_naming_style.camel_case_style.capitalization  = camel_case

# Interfaces - PascalCase + 'I' prefix
dotnet_naming_style.interface_style.capitalization  = pascal_case
dotnet_naming_style.interface_style.required_prefix = I
dotnet_naming_rule.interface_rule.style             = interface_style
dotnet_naming_rule.interface_rule.severity          = error
dotnet_naming_rule.interface_rule.symbols           = interfaces
dotnet_naming_symbols.interfaces.applicable_kinds   = interface

# Types - PascalCase
dotnet_naming_rule.types_rule.style          = pascal_case_style
dotnet_naming_rule.types_rule.severity       = error
dotnet_naming_rule.types_rule.symbols        = types
dotnet_naming_symbols.types.applicable_kinds = class,struct,enum,delegate

# async methods - PascalCase + end in "Async"
dotnet_naming_style.async_method_style.capitalization  = pascal_case
dotnet_naming_style.async_method_style.required_suffix = Async
dotnet_naming_rule.async_method_rule.style             = async_method_style
dotnet_naming_rule.async_method_rule.severity          = error
dotnet_naming_rule.async_method_rule.symbols           = async_methods
dotnet_naming_symbols.async_methods.applicable_kinds   = method
dotnet_naming_symbols.async_methods.required_modifiers = async

# Methods - PascalCase
dotnet_naming_rule.method_rule.style           = pascal_case_style
dotnet_naming_rule.method_rule.severity        = error
dotnet_naming_rule.method_rule.symbols         = methods
dotnet_naming_symbols.methods.applicable_kinds = method

# Parameters - camelCase
dotnet_naming_rule.parameter_rule.style           = camel_case_style
dotnet_naming_rule.parameter_rule.severity        = error
dotnet_naming_rule.parameter_rule.symbols         = parameters
dotnet_naming_symbols.parameters.applicable_kinds = parameter

# Constant fields - PascalCase
dotnet_naming_rule.constant_field_rule.style             = pascal_case_style
dotnet_naming_rule.constant_field_rule.severity          = error
dotnet_naming_rule.constant_field_rule.symbols           = constant_fields
dotnet_naming_symbols.constant_fields.applicable_kinds   = field
dotnet_naming_symbols.constant_fields.required_modifiers = const

# Member fields - camelCase + '_' prefix
dotnet_naming_style.member_field_style.capitalization  = camel_case
dotnet_naming_style.member_field_style.required_prefix = _
dotnet_naming_rule.member_field_rule.style             = member_field_style
dotnet_naming_rule.member_field_rule.severity          = error
dotnet_naming_rule.member_field_rule.symbols           = member_fields
dotnet_naming_symbols.member_fields.applicable_kinds   = field

# Properties - PascalCase
dotnet_naming_rule.property_rule.style            = pascal_case_style
dotnet_naming_rule.property_rule.severity         = error
dotnet_naming_rule.property_rule.symbols          = properties
dotnet_naming_symbols.properties.applicable_kinds = property

# Events - PascalCase
dotnet_naming_rule.event_rule.style            = pascal_case_style
dotnet_naming_rule.event_rule.severity         = error
dotnet_naming_rule.event_rule.symbols          = events
dotnet_naming_symbols.events.applicable_kinds  = event
